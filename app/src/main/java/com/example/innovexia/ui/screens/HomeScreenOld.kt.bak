package com.example.innovexia.ui.screens

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.innovexia.ui.components.BottomBar
import com.example.innovexia.ui.components.ChevronButton
import com.example.innovexia.ui.components.GradientScaffold
import com.example.innovexia.ui.components.HomeComposer
import com.example.innovexia.ui.components.SideMenu
import com.example.innovexia.ui.models.Persona
import com.example.innovexia.ui.models.SettingsPrefs
import com.example.innovexia.ui.models.ThemeMode
import com.example.innovexia.ui.models.demoPersonas
import com.example.innovexia.ui.sheets.PersonaSelectorSheet
import com.example.innovexia.ui.sheets.ProfileSheet
import com.example.innovexia.ui.sheets.SettingsSheet
import com.example.innovexia.ui.sheets.ToolsPanelSheet
import com.example.innovexia.ui.theme.InnovexiaTheme
import kotlinx.coroutines.launch

@Composable
fun HomeScreen(
    modifier: Modifier = Modifier
) {
    // State management
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val scope = rememberCoroutineScope()
    var showSettings by rememberSaveable { mutableStateOf(false) }
    var showProfile by rememberSaveable { mutableStateOf(false) }
    var showToolsPanel by rememberSaveable { mutableStateOf(false) }
    var showPersonaSelector by rememberSaveable { mutableStateOf(false) }

    // Theme state (in-memory, no persistence)
    var themeMode by rememberSaveable { mutableStateOf(ThemeMode.System) }
    var settingsPrefs by rememberSaveable { mutableStateOf(SettingsPrefs()) }

    // Composer state
    var composerText by rememberSaveable { mutableStateOf("") }
    var selectedPersona by rememberSaveable { mutableStateOf<Persona?>(demoPersonas().first()) }

    // Derive actual dark theme from mode
    val systemDarkTheme = isSystemInDarkTheme()
    val darkTheme = when (themeMode) {
        ThemeMode.System -> systemDarkTheme
        ThemeMode.Light -> false
        ThemeMode.Dark -> true
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        drawerContent = {
            SideMenu(
                onNewChat = {
                    scope.launch { drawerState.close() }
                    // TODO: Navigate to new chat
                },
                onSearch = {
                    scope.launch { drawerState.close() }
                    // TODO: Open search
                },
                onOpenRecent = { chatId ->
                    scope.launch { drawerState.close() }
                    // TODO: Navigate to chat with chatId
                },
                onSettings = {
                    scope.launch { drawerState.close() }
                    showSettings = true
                },
                darkTheme = darkTheme
            )
        }
    ) {
        HomeContent(
            modifier = modifier,
            darkTheme = darkTheme,
            isDrawerOpen = drawerState.isOpen,
            onMenuClick = {
                scope.launch {
                    if (drawerState.isClosed) {
                        drawerState.open()
                    } else {
                        drawerState.close()
                    }
                }
            },
            onAvatarClick = { showProfile = true },
            onSettingsClick = { showSettings = true },
            composerText = composerText,
            onComposerTextChange = { composerText = it },
            onSend = {
                // TODO: Send message
                composerText = ""
            },
            onAttachClick = { /* TODO: Open attachment picker */ },
            onToolsClick = { showToolsPanel = true },
            selectedPersona = selectedPersona,
            onPersonaClick = { showPersonaSelector = true }
        )
    }

    // Settings sheet
    if (showSettings) {
        SettingsSheet(
            onDismiss = { showSettings = false },
            themeMode = themeMode,
            onThemeChange = { themeMode = it },
            prefs = settingsPrefs,
            onPrefsChange = { settingsPrefs = it },
            darkTheme = darkTheme
        )
    }

    // Profile sheet
    if (showProfile) {
        ProfileSheet(
            onDismiss = { showProfile = false },
            darkTheme = darkTheme
        )
    }

    // Tools panel sheet
    if (showToolsPanel) {
        ToolsPanelSheet(
            onDismiss = { showToolsPanel = false },
            darkTheme = darkTheme
        )
    }

    // Persona selector sheet
    if (showPersonaSelector) {
        PersonaSelectorSheet(
            onDismiss = { showPersonaSelector = false },
            onPersonaSelected = { selectedPersona = it },
            currentPersona = selectedPersona,
            darkTheme = darkTheme
        )
    }
}

@Composable
private fun HomeContent(
    modifier: Modifier = Modifier,
    darkTheme: Boolean = false,
    isDrawerOpen: Boolean = false,
    onMenuClick: () -> Unit = {},
    onAvatarClick: () -> Unit = {},
    onSettingsClick: () -> Unit = {},
    composerText: String = "",
    onComposerTextChange: (String) -> Unit = {},
    onSend: () -> Unit = {},
    onAttachClick: () -> Unit = {},
    onToolsClick: () -> Unit = {},
    selectedPersona: Persona? = null,
    onPersonaClick: () -> Unit = {}
) {
    GradientScaffold(
        modifier = modifier,
        darkTheme = darkTheme
    ) {
        Box(modifier = Modifier.fillMaxSize()) {
            // Top-right chevron button
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 8.dp, end = 8.dp),
                contentAlignment = Alignment.TopEnd
            ) {
                ChevronButton(
                    onClick = onMenuClick,
                    isOpen = isDrawerOpen,
                    darkTheme = darkTheme
                )
            }

            // Bottom area with composer and bottom bar
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.BottomCenter)
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 20.dp, vertical = 16.dp)
                ) {
                    // Home Composer
                    HomeComposer(
                        value = composerText,
                        onValueChange = onComposerTextChange,
                        onSend = onSend,
                        onAttachClick = onAttachClick,
                        onToolsClick = onToolsClick,
                        persona = selectedPersona,
                        onPersonaClick = onPersonaClick,
                        darkTheme = darkTheme
                    )
                }
            }

            // Bottom bar (above composer)
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.BottomCenter)
                    .padding(bottom = 80.dp)
            ) {
                BottomBar(
                    onAvatarClick = onAvatarClick,
                    onSettingsClick = onSettingsClick,
                    darkTheme = darkTheme
                )
            }
        }
    }
}

@Preview(name = "Light Theme - Drawer Closed", showBackground = true)
@Composable
fun HomeScreenLightPreview() {
    InnovexiaTheme(darkTheme = false) {
        HomeContent(
            darkTheme = false,
            isDrawerOpen = false,
            selectedPersona = demoPersonas().first()
        )
    }
}

@Preview(name = "Dark Theme", showBackground = true)
@Composable
fun HomeScreenDarkPreview() {
    InnovexiaTheme(darkTheme = true) {
        HomeContent(
            darkTheme = true,
            isDrawerOpen = false,
            selectedPersona = demoPersonas()[1]
        )
    }
}

@Preview(name = "Light Theme - Drawer Open", showBackground = true)
@Composable
fun HomeScreenLightDrawerOpenPreview() {
    InnovexiaTheme(darkTheme = false) {
        HomeContent(
            darkTheme = false,
            isDrawerOpen = true,
            selectedPersona = demoPersonas().first()
        )
    }
}
