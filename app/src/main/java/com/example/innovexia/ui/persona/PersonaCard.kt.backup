package com.example.innovexia.ui.persona

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.Star
import androidx.compose.material.icons.outlined.Star
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.semantics.Role
import androidx.compose.ui.semantics.contentDescription
import androidx.compose.ui.semantics.role
import androidx.compose.ui.semantics.semantics
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.layout.FlowRow
import com.example.innovexia.ui.theme.InnovexiaTheme

/**
 * Enhanced Persona Card V2 with immersive design:
 * - Glass-morphism effects and animated active glow
 * - Created & last used timestamps
 * - 3-line bio with proper overflow
 * - Long-press gesture for quick actions
 * - Active indicator badge with icon
 * - Better visual hierarchy and spacing
 */
@OptIn(ExperimentalLayoutApi::class, ExperimentalFoundationApi::class)
@Composable
fun PersonaCard(
    persona: Persona,
    isActive: Boolean,
    onSelect: (Persona) -> Unit,
    onStar: (Persona) -> Unit,
    onDuplicate: (Persona) -> Unit,
    onRename: (Persona) -> Unit,
    onDelete: (Persona) -> Unit,
    modifier: Modifier = Modifier,
    showImport: Boolean = false,
    onImport: ((Persona) -> Unit)? = null,
    onEdit: ((Persona) -> Unit)? = null,
    onMakePublic: ((Persona) -> Unit)? = null
) {
    var menuExpanded by remember { mutableStateOf(false) }

    // Card styling with gold accent for active state
    val cardBorderColor = if (isActive) {
        InnovexiaTheme.colors.goldDim
    } else {
        InnovexiaTheme.colors.personaCardBorder
    }

    val cardBorderWidth = if (isActive) 2.dp else 1.dp

    val cardModifier = if (isActive) {
        modifier
            .shadow(
                elevation = 12.dp,
                shape = RoundedCornerShape(14.dp),
                spotColor = InnovexiaTheme.colors.goldDim.copy(alpha = 0.12f)
            )
    } else {
        modifier
    }

    Card(
        modifier = cardModifier
            .fillMaxWidth()
            .wrapContentHeight()
            .semantics {
                role = Role.Button
                contentDescription = "Persona card: ${persona.name}. ${persona.summary}"
            },
        shape = RoundedCornerShape(14.dp),
        colors = CardDefaults.cardColors(containerColor = InnovexiaTheme.colors.personaCardBg),
        border = BorderStroke(cardBorderWidth, cardBorderColor)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp)
                .sizeIn(minHeight = 128.dp, maxHeight = 160.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            // ─── Header Row: Avatar + Name/Time + Overflow (40dp) ───
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(40.dp),
                horizontalArrangement = Arrangement.spacedBy(10.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Avatar with colored ring (28dp)
                Box(
                    modifier = Modifier
                        .size(28.dp)
                        .border(2.dp, Color(persona.color), CircleShape)
                        .padding(2.dp)
                        .clip(CircleShape)
                        .background(InnovexiaTheme.colors.personaCardBg),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = persona.initial,
                        style = MaterialTheme.typography.labelMedium,
                        fontWeight = FontWeight.Bold,
                        color = Color(persona.color),
                        fontSize = 12.sp
                    )
                }

                // Name + updatedAt
                Column(
                    modifier = Modifier.weight(1f),
                    verticalArrangement = Arrangement.Center
                ) {
                    Text(
                        text = persona.name,
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurface,
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis
                    )
                    Text(
                        text = persona.updatedAt,
                        style = MaterialTheme.typography.labelSmall,
                        fontSize = 11.sp,
                        color = InnovexiaTheme.colors.personaMutedText
                    )
                }

                // Overflow menu (24dp)
                Box {
                    IconButton(
                        onClick = { menuExpanded = true },
                        modifier = Modifier.size(24.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.MoreVert,
                            contentDescription = "More options for ${persona.name}",
                            tint = InnovexiaTheme.colors.personaMutedText,
                            modifier = Modifier.size(18.dp)
                        )
                    }
                    DropdownMenu(
                        expanded = menuExpanded,
                        onDismissRequest = { menuExpanded = false }
                    ) {
                        if (onEdit != null) {
                            DropdownMenuItem(
                                text = { Text("Edit") },
                                onClick = {
                                    menuExpanded = false
                                    onEdit(persona)
                                }
                            )
                        }
                        DropdownMenuItem(
                            text = { Text("Rename") },
                            onClick = {
                                menuExpanded = false
                                onRename(persona)
                            }
                        )
                        DropdownMenuItem(
                            text = { Text("Duplicate") },
                            onClick = {
                                menuExpanded = false
                                onDuplicate(persona)
                            }
                        )
                        if (!showImport) {
                            DropdownMenuItem(
                                text = { Text("Make Public") },
                                onClick = {
                                    android.util.Log.d("PersonaCard", "Make Public clicked for persona: ${persona.name} (${persona.id})")
                                    menuExpanded = false
                                    onMakePublic?.invoke(persona)
                                    android.util.Log.d("PersonaCard", "onMakePublic invoked: ${onMakePublic != null}")
                                }
                            )
                        }
                        DropdownMenuItem(
                            text = { Text("Delete", color = MaterialTheme.colorScheme.error) },
                            onClick = {
                                menuExpanded = false
                                onDelete(persona)
                            }
                        )
                    }
                }
            }

            // ─── Summary (max 2 lines) ───
            Text(
                text = persona.summary,
                style = MaterialTheme.typography.bodySmall,
                fontSize = 13.sp,
                color = InnovexiaTheme.colors.personaMutedText.copy(alpha = 0.9f),
                maxLines = 2,
                overflow = TextOverflow.Ellipsis,
                lineHeight = 16.sp
            )

            // ─── Tags (max 2 visible + "+N") ───
            if (persona.tags.isNotEmpty()) {
                Row(
                    horizontalArrangement = Arrangement.spacedBy(4.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.height(18.dp)
                ) {
                    persona.tags.take(2).forEach { tag ->
                        Surface(
                            shape = RoundedCornerShape(4.dp),
                            color = Color(0xFF1E293B),
                            contentColor = Color(0xFF94A3B8)
                        ) {
                            Text(
                                text = tag,
                                style = MaterialTheme.typography.labelSmall,
                                fontSize = 11.sp,
                                modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp)
                            )
                        }
                    }
                    if (persona.tags.size > 2) {
                        Surface(
                            shape = RoundedCornerShape(4.dp),
                            color = Color(0xFF1E293B).copy(alpha = 0.5f),
                            contentColor = Color(0xFF94A3B8)
                        ) {
                            Text(
                                text = "+${persona.tags.size - 2}",
                                style = MaterialTheme.typography.labelSmall,
                                fontSize = 10.sp,
                                modifier = Modifier.padding(horizontal = 5.dp, vertical = 2.dp)
                            )
                        }
                    }
                }
            }

            // ─── Action Row (with proper spacing to prevent clipping) ───
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .wrapContentHeight()
                    .heightIn(min = 36.dp)
                    .padding(top = 4.dp), // Space for shadow/outline
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Select/Import pill button
                if (showImport && onImport != null) {
                    Button(
                        onClick = { onImport(persona) },
                        modifier = Modifier
                            .weight(1f)
                            .height(32.dp)
                            .defaultMinSize(minWidth = 84.dp),
                        shape = RoundedCornerShape(16.dp),
                        contentPadding = PaddingValues(horizontal = 10.dp, vertical = 0.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.secondaryContainer,
                            contentColor = MaterialTheme.colorScheme.onSecondaryContainer
                        )
                    ) {
                        Text("Import", style = MaterialTheme.typography.labelMedium, fontSize = 12.sp)
                    }
                } else {
                    Button(
                        onClick = { onSelect(persona) },
                        modifier = Modifier
                            .weight(1f)
                            .height(32.dp)
                            .defaultMinSize(minWidth = 84.dp),
                        shape = RoundedCornerShape(16.dp),
                        contentPadding = PaddingValues(horizontal = 10.dp, vertical = 0.dp),
                        colors = if (isActive) {
                            ButtonDefaults.buttonColors(
                                containerColor = InnovexiaTheme.colors.goldDim,
                                contentColor = InnovexiaTheme.colors.onGold
                            )
                        } else {
                            ButtonDefaults.buttonColors()
                        }
                    ) {
                        Text("Select", style = MaterialTheme.typography.labelMedium, fontSize = 12.sp)
                    }
                }

                // Star icon button (24dp touch target)
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .clickable(
                            onClick = { onStar(persona) },
                            onClickLabel = if (persona.starred) "Unstar ${persona.name}" else "Star ${persona.name}"
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = if (persona.starred) Icons.Filled.Star else Icons.Outlined.Star,
                        contentDescription = null,
                        tint = if (persona.starred) InnovexiaTheme.colors.goldDim else InnovexiaTheme.colors.personaMutedText,
                        modifier = Modifier.size(20.dp)
                    )
                }
            }
        }
    }
}

// ═════════════════════════════════════════════════════════════════════════════
// Previews
// ═════════════════════════════════════════════════════════════════════════════

@Preview(name = "Compact Card - Active Dark", showBackground = true, backgroundColor = 0xFF0F172A)
@Composable
private fun PersonaCardPreview_Dark_Compact() {
    InnovexiaTheme(darkTheme = true) {
        Box(modifier = Modifier.padding(16.dp).width(164.dp)) {
            PersonaCard(
                persona = Persona(
                    id = "1",
                    name = "Code Assistant",
                    initial = "C",
                    color = 0xFF60A5FA,
                    summary = "Expert in Kotlin, Jetpack Compose, and Android development. Provides clean code.",
                    tags = listOf("Coding", "Android", "Expert"),
                    starred = true,
                    updatedAt = "1h"
                ),
                isActive = true,
                onSelect = {},
                onStar = {},
                onDuplicate = {},
                onRename = {},
                onDelete = {}
            )
        }
    }
}

@Preview(name = "Compact Card - Inactive Light", showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun PersonaCardPreview_Light_Compact() {
    InnovexiaTheme(darkTheme = false) {
        Box(modifier = Modifier.padding(16.dp).width(164.dp)) {
            PersonaCard(
                persona = Persona(
                    id = "2",
                    name = "Research Analyst",
                    initial = "R",
                    color = 0xFF34D399,
                    summary = "Deep researcher with systematic approach to complex topics.",
                    tags = listOf("Research", "Analysis"),
                    starred = false,
                    updatedAt = "2d"
                ),
                isActive = false,
                onSelect = {},
                onStar = {},
                onDuplicate = {},
                onRename = {},
                onDelete = {}
            )
        }
    }
}

@Preview(name = "Grid 2 Cols - Phone", showBackground = true, backgroundColor = 0xFF0F172A, widthDp = 360)
@Composable
private fun PersonaGridPreview_Phone_2Cols() {
    InnovexiaTheme(darkTheme = true) {
        androidx.compose.foundation.lazy.grid.LazyVerticalGrid(
            columns = androidx.compose.foundation.lazy.grid.GridCells.Adaptive(minSize = 152.dp),
            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp),
            modifier = Modifier.fillMaxWidth().height(600.dp)
        ) {
            items(6) { index ->
                PersonaCard(
                    persona = demoMyPersonas()[index],
                    isActive = index == 0,
                    onSelect = {},
                    onStar = {},
                    onDuplicate = {},
                    onRename = {},
                    onDelete = {}
                )
            }
        }
    }
}

@Preview(name = "Grid 1 Col - Narrow Phone", showBackground = true, backgroundColor = 0xFF0F172A, widthDp = 320)
@Composable
private fun PersonaGridPreview_Narrow_1Col() {
    InnovexiaTheme(darkTheme = true) {
        androidx.compose.foundation.lazy.grid.LazyVerticalGrid(
            columns = androidx.compose.foundation.lazy.grid.GridCells.Adaptive(minSize = 152.dp),
            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp),
            modifier = Modifier.fillMaxWidth().height(600.dp)
        ) {
            items(4) { index ->
                PersonaCard(
                    persona = demoMyPersonas()[index],
                    isActive = index == 0,
                    onSelect = {},
                    onStar = {},
                    onDuplicate = {},
                    onRename = {},
                    onDelete = {}
                )
            }
        }
    }
}

@Preview(name = "Grid 3 Cols - Tablet", showBackground = true, backgroundColor = 0xFF0F172A, widthDp = 600)
@Composable
private fun PersonaGridPreview_Tablet_3Cols() {
    InnovexiaTheme(darkTheme = true) {
        androidx.compose.foundation.lazy.grid.LazyVerticalGrid(
            columns = androidx.compose.foundation.lazy.grid.GridCells.Adaptive(minSize = 152.dp),
            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp),
            modifier = Modifier.fillMaxWidth().height(600.dp)
        ) {
            items(6) { index ->
                PersonaCard(
                    persona = demoMyPersonas()[index],
                    isActive = index == 0,
                    onSelect = {},
                    onStar = {},
                    onDuplicate = {},
                    onRename = {},
                    onDelete = {}
                )
            }
        }
    }
}
