package com.example.innovexia.ui.components

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Add
import androidx.compose.material.icons.outlined.ExpandLess
import androidx.compose.material.icons.outlined.ExpandMore
import androidx.compose.material.icons.outlined.Remove
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.DpOffset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.graphics.TransformOrigin
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import com.example.innovexia.InnovexiaApplication
import com.example.innovexia.local.DownloadState
import com.example.innovexia.ui.theme.InnovexiaColors
import kotlinx.coroutines.launch

/**
 * Header Title Model Switcher (UI Only)
 * Provides a pressable title that opens a model selection panel with quick AI settings.
 */

// ==================== TOKENS ====================

object HeaderPanelTokens {
    val SurfaceLight = InnovexiaColors.LightSurfaceElevated
    val SurfaceDark = InnovexiaColors.DarkSurfaceElevated
    val BorderLight = InnovexiaColors.LightBorder.copy(alpha = 0.6f)
    val BorderDark = InnovexiaColors.DarkBorder.copy(alpha = 0.6f)
    val TitleLight = InnovexiaColors.LightTextPrimary
    val TitleDark = InnovexiaColors.DarkTextPrimary
    val SubtleLight = InnovexiaColors.LightTextSecondary
    val SubtleDark = InnovexiaColors.DarkTextSecondary
    val Accent = InnovexiaColors.GoldDim
    val Radius = 16.dp
}

// ==================== DATA MODELS ====================

/**
 * UI-only AI preferences for per-chat model selection
 */
data class UiAiPrefs(
    val model: String = "gemini-2.5-flash",
    val creativity: Float = 0.7f, // Temperature for generation
    val webAccess: Boolean = false, // Coming soon
    val memory: Boolean = true, // Coming soon
    val maxOutputTokens: Int = 2048, // Sensible default: not too much, not too little
    val safety: String = "Standard", // Standard or Unfiltered
    val defaultForNew: Boolean = false
)

/**
 * Model provider section
 */
enum class ModelProvider {
    GOOGLE, OPENAI, CLAUDE, PERPLEXITY, LOCAL
}

/**
 * Model definition with metadata
 */
data class ModelInfo(
    val id: String,
    val displayName: String,
    val provider: ModelProvider,
    val badge: String,
    val description: String,
    val isAvailable: Boolean = true
)

/**
 * Available models grouped by provider
 */
object AvailableModels {
    private fun checkLocalModelAvailable(context: android.content.Context, modelPath: String): Boolean {
        // Check if file exists in downloaded models directory
        val modelFilename = modelPath.substringAfterLast('/')
        val downloadedFile = java.io.File(context.filesDir, "local_models/$modelFilename")
        if (downloadedFile.exists()) {
            return true
        }

        // Fall back to checking assets
        return try {
            context.assets.open(modelPath).use { true }
        } catch (e: Exception) {
            false
        }
    }

    fun getAll(context: android.content.Context? = null) = listOf(
        // Google Gemini models
        ModelInfo(
            id = "gemini-2.5-flash",
            displayName = "Gemini 2.5 Flash",
            provider = ModelProvider.GOOGLE,
            badge = "Fast",
            description = "Great for everyday tasks",
            isAvailable = true
        ),
        ModelInfo(
            id = "gemini-2.5-flash-lite",
            displayName = "Gemini 2.5 Flash Lite",
            provider = ModelProvider.GOOGLE,
            badge = "Faster",
            description = "Lightweight & ultra-fast responses",
            isAvailable = true
        ),
        ModelInfo(
            id = "gemini-2.5-pro",
            displayName = "Gemini 2.5 Pro",
            provider = ModelProvider.GOOGLE,
            badge = "Quality",
            description = "Best reasoning & longer outputs",
            isAvailable = true
        ),
        // OpenAI (coming soon)
        ModelInfo(
            id = "gpt-4o",
            displayName = "GPT-4o",
            provider = ModelProvider.OPENAI,
            badge = "Coming Soon",
            description = "OpenAI's most capable model",
            isAvailable = false
        ),
        // Claude (coming soon)
        ModelInfo(
            id = "claude-3.5-sonnet",
            displayName = "Claude 3.5 Sonnet",
            provider = ModelProvider.CLAUDE,
            badge = "Coming Soon",
            description = "Anthropic's latest model",
            isAvailable = false
        ),
        // Perplexity (coming soon)
        ModelInfo(
            id = "pplx-sonar",
            displayName = "Sonar",
            provider = ModelProvider.PERPLEXITY,
            badge = "Coming Soon",
            description = "Web-grounded responses",
            isAvailable = false
        ),
        // Local models (on-device) - Downloadable from Hugging Face
        ModelInfo(
            id = "tinyllama-1.1b-chat-q8",
            displayName = "TinyLlama 1.1B (INT8)",
            provider = ModelProvider.LOCAL,
            badge = "Download",
            description = "1.1GB • Private, works offline",
            isAvailable = true // Can be downloaded
        ),
        ModelInfo(
            id = "gemma3-1b-int4",
            displayName = "Gemma 3 1B (INT4)",
            provider = ModelProvider.LOCAL,
            badge = "Download",
            description = "680MB • Google's latest",
            isAvailable = true // Can be downloaded
        ),
        ModelInfo(
            id = "gemma3-1b-int8",
            displayName = "Gemma 3 1B (INT8)",
            provider = ModelProvider.LOCAL,
            badge = "Download",
            description = "1.2GB • Higher quality",
            isAvailable = true // Can be downloaded
        )
    )

    @Deprecated("Use getAll(context) instead for dynamic availability checking")
    val all get() = getAll(null)

    fun getByProvider(provider: ModelProvider, context: android.content.Context? = null) =
        getAll(context).filter { it.provider == provider }
}

// ==================== HEADER TITLE (PRESSABLE) ====================

@Composable
fun ChatHeaderTitle(
    title: String,
    expanded: Boolean,
    onToggle: () -> Unit,
    darkTheme: Boolean,
    modifier: Modifier = Modifier
) {
    val titleColor = if (darkTheme) HeaderPanelTokens.TitleDark else HeaderPanelTokens.TitleLight
    val subtleColor = if (darkTheme) HeaderPanelTokens.SubtleDark else HeaderPanelTokens.SubtleLight

    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = modifier
            .clip(RoundedCornerShape(10.dp))
            .clickable { onToggle() }
            .padding(horizontal = 8.dp, vertical = 6.dp)
    ) {
        Text(
            title,
            color = titleColor,
            fontSize = 18.sp,
            fontWeight = FontWeight.SemiBold,
            maxLines = 1,
            overflow = TextOverflow.Ellipsis
        )
        Icon(
            imageVector = if (expanded) Icons.Outlined.ExpandLess else Icons.Outlined.ExpandMore,
            contentDescription = if (expanded) "Close model switcher" else "Open model switcher",
            tint = subtleColor,
            modifier = Modifier.padding(start = 4.dp)
        )
    }
}

// ==================== MODEL SWITCHER PANEL ====================

@Composable
fun ModelSwitcherPanel(
    prefs: UiAiPrefs,
    onPrefsChange: (UiAiPrefs) -> Unit,
    onOpenFullSettings: () -> Unit,
    onDismiss: () -> Unit,
    darkTheme: Boolean,
    modifier: Modifier = Modifier
) {
    val surfaceColor = if (darkTheme) HeaderPanelTokens.SurfaceDark else HeaderPanelTokens.SurfaceLight
    val borderColor = if (darkTheme) HeaderPanelTokens.BorderDark else HeaderPanelTokens.BorderLight
    val scrimColor = Color.Black.copy(alpha = 0.5f)

    Dialog(
        onDismissRequest = onDismiss,
        properties = DialogProperties(
            dismissOnBackPress = true,
            dismissOnClickOutside = true,
            usePlatformDefaultWidth = false
        )
    ) {
        // Animated container with scale + fade
        AnimatedVisibility(
            visible = true,
            enter = fadeIn(
                animationSpec = tween(durationMillis = 250)
            ) + scaleIn(
                initialScale = 0.9f,
                animationSpec = spring(
                    dampingRatio = Spring.DampingRatioMediumBouncy,
                    stiffness = Spring.StiffnessMedium
                )
            ),
            exit = fadeOut(
                animationSpec = tween(durationMillis = 200)
            ) + scaleOut(
                targetScale = 0.95f,
                animationSpec = tween(durationMillis = 200)
            )
        ) {
            // Dialog content with scrollable interior
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
                    .heightIn(max = 600.dp), // Max height for scrolling
                contentAlignment = Alignment.Center
            ) {
                Surface(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(HeaderPanelTokens.Radius),
                    color = surfaceColor,
                    tonalElevation = 8.dp,
                    shadowElevation = 16.dp,
                    border = BorderStroke(1.dp, borderColor)
                ) {
                    // Scrollable column
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .heightIn(max = 600.dp)
                            .verticalScroll(rememberScrollState())
                            .padding(vertical = 8.dp)
                    ) {
                        PanelContent(
                            prefs = prefs,
                            onPrefsChange = onPrefsChange,
                            onOpenFullSettings = onOpenFullSettings,
                            darkTheme = darkTheme,
                            isSheet = false
                        )
                    }
                }
            }
        }
    }
}

// ==================== PANEL CONTENT ====================

@Composable
private fun PanelContent(
    prefs: UiAiPrefs,
    onPrefsChange: (UiAiPrefs) -> Unit,
    onOpenFullSettings: () -> Unit,
    darkTheme: Boolean,
    isSheet: Boolean
) {
    val borderColor = if (darkTheme) HeaderPanelTokens.BorderDark else HeaderPanelTokens.BorderLight
    val subtleColor = if (darkTheme) HeaderPanelTokens.SubtleDark else HeaderPanelTokens.SubtleLight

    Column(
        modifier = Modifier
            .padding(8.dp)
            .fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(10.dp)
    ) {
        // --- Models by Provider ---
        Text(
            "Models",
            color = subtleColor,
            fontSize = 12.sp,
            modifier = Modifier.padding(horizontal = 4.dp)
        )

        // Google Section
        ProviderSection(
            provider = ModelProvider.GOOGLE,
            prefs = prefs,
            onPrefsChange = onPrefsChange,
            darkTheme = darkTheme,
            borderColor = borderColor
        )

        // OpenAI Section (Coming Soon)
        ProviderSection(
            provider = ModelProvider.OPENAI,
            prefs = prefs,
            onPrefsChange = onPrefsChange,
            darkTheme = darkTheme,
            borderColor = borderColor
        )

        // Claude Section (Coming Soon)
        ProviderSection(
            provider = ModelProvider.CLAUDE,
            prefs = prefs,
            onPrefsChange = onPrefsChange,
            darkTheme = darkTheme,
            borderColor = borderColor
        )

        // Perplexity Section (Coming Soon)
        ProviderSection(
            provider = ModelProvider.PERPLEXITY,
            prefs = prefs,
            onPrefsChange = onPrefsChange,
            darkTheme = darkTheme,
            borderColor = borderColor
        )

        // Local/On-Device Section
        ProviderSection(
            provider = ModelProvider.LOCAL,
            prefs = prefs,
            onPrefsChange = onPrefsChange,
            darkTheme = darkTheme,
            borderColor = borderColor
        )

        // --- Quick settings ---
        Text(
            "Quick settings",
            color = subtleColor,
            fontSize = 12.sp,
            modifier = Modifier.padding(horizontal = 4.dp)
        )

        SettingRow(title = "Creativity", darkTheme = darkTheme) {
            Column(horizontalAlignment = Alignment.End) {
                Slider(
                    value = prefs.creativity,
                    onValueChange = { onPrefsChange(prefs.copy(creativity = it)) },
                    valueRange = 0f..1f,
                    steps = 9, // 0.0, 0.1, ..., 1.0
                    modifier = Modifier.width(160.dp)
                )
            }
        }

        // Web access - Coming Soon
        SettingRow(title = "Web access", darkTheme = darkTheme) {
            Surface(
                shape = RoundedCornerShape(999.dp),
                color = borderColor.copy(alpha = 0.2f)
            ) {
                Text(
                    "Coming Soon",
                    modifier = Modifier.padding(horizontal = 10.dp, vertical = 4.dp),
                    style = MaterialTheme.typography.labelSmall,
                    color = subtleColor,
                    fontSize = 11.sp
                )
            }
        }

        // Memory - Coming Soon
        SettingRow(title = "Memory", darkTheme = darkTheme) {
            Surface(
                shape = RoundedCornerShape(999.dp),
                color = borderColor.copy(alpha = 0.2f)
            ) {
                Text(
                    "Coming Soon",
                    modifier = Modifier.padding(horizontal = 10.dp, vertical = 4.dp),
                    style = MaterialTheme.typography.labelSmall,
                    color = subtleColor,
                    fontSize = 11.sp
                )
            }
        }

        StepperRow(
            title = "Max tokens",
            value = prefs.maxOutputTokens,
            min = 512,
            max = 8192,
            step = 512,
            darkTheme = darkTheme
        ) {
            onPrefsChange(prefs.copy(maxOutputTokens = it))
        }

        DropdownRow(
            title = "Safety",
            current = prefs.safety,
            items = listOf("Standard", "Unfiltered"),
            darkTheme = darkTheme
        ) {
            onPrefsChange(prefs.copy(safety = it))
        }

        HorizontalDivider(color = borderColor)

        ToggleRow("Set as default for new chats", prefs.defaultForNew, darkTheme) {
            onPrefsChange(prefs.copy(defaultForNew = it))
        }

        OutlinedButton(
            onClick = onOpenFullSettings,
            border = BorderStroke(1.dp, borderColor),
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("View all AI settings")
        }
    }
}

// ==================== HELPER SECTIONS ====================

@Composable
private fun ProviderSection(
    provider: ModelProvider,
    prefs: UiAiPrefs,
    onPrefsChange: (UiAiPrefs) -> Unit,
    darkTheme: Boolean,
    borderColor: Color
) {
    val context = LocalContext.current
    val app = context.applicationContext as InnovexiaApplication
    val downloadManager = app.downloadManager
    val scope = rememberCoroutineScope()

    var showDownloadDialog by remember { mutableStateOf(false) }
    var selectedModelForDownload by remember { mutableStateOf<ModelInfo?>(null) }

    val models = AvailableModels.getByProvider(provider)
    if (models.isEmpty()) return

    val titleColor = if (darkTheme) HeaderPanelTokens.TitleDark else HeaderPanelTokens.TitleLight
    val subtleColor = if (darkTheme) HeaderPanelTokens.SubtleDark else HeaderPanelTokens.SubtleLight

    Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {
        // Provider name
        val providerLabel = when (provider) {
            ModelProvider.LOCAL -> "On-Device (Local)"
            else -> provider.name.lowercase().replaceFirstChar { it.uppercase() }
        }
        Text(
            providerLabel,
            color = subtleColor,
            fontSize = 11.sp,
            fontWeight = FontWeight.Medium,
            modifier = Modifier.padding(horizontal = 4.dp)
        )

        // Models in this provider
        Column(
            Modifier
                .clip(RoundedCornerShape(12.dp))
                .border(1.dp, borderColor, RoundedCornerShape(12.dp))
        ) {
            models.forEachIndexed { index, model ->
                val isLocalModel = provider == ModelProvider.LOCAL
                val isDownloaded = if (isLocalModel && downloadManager != null) {
                    downloadManager.isModelDownloaded(model.id)
                } else {
                    true
                }

                ModelRow(
                    model = model,
                    selected = prefs.model == model.id,
                    darkTheme = darkTheme,
                    isDownloaded = isDownloaded,
                    onClick = {
                        if (model.isAvailable) {
                            if (isLocalModel && !isDownloaded && downloadManager != null) {
                                // Show download dialog
                                selectedModelForDownload = model
                                showDownloadDialog = true
                            } else {
                                // Select model
                                onPrefsChange(prefs.copy(model = model.id))
                            }
                        }
                    }
                )
                if (index < models.size - 1) {
                    HorizontalDivider(color = borderColor)
                }
            }
        }
    }

    // Download dialog
    if (showDownloadDialog && selectedModelForDownload != null && downloadManager != null) {
        val downloadState by downloadManager.downloadState.collectAsState()
        val modelDownloadState = downloadState[selectedModelForDownload!!.id] ?: DownloadState.NotStarted
        val downloadableModel = downloadManager.availableModels[selectedModelForDownload!!.id]

        if (downloadableModel != null) {
            ModelDownloadDialog(
                model = downloadableModel,
                downloadState = modelDownloadState,
                onDownload = {
                    scope.launch {
                        downloadManager.downloadModel(selectedModelForDownload!!.id)
                    }
                },
                onCancel = {
                    showDownloadDialog = false
                    selectedModelForDownload = null
                },
                onDismiss = {
                    // Auto-select after successful download (capture ID before clearing)
                    val downloadedModelId = selectedModelForDownload?.id
                    showDownloadDialog = false
                    selectedModelForDownload = null

                    if (modelDownloadState is DownloadState.Completed && downloadedModelId != null) {
                        onPrefsChange(prefs.copy(model = downloadedModelId))
                    }
                },
                onDelete = {
                    scope.launch {
                        selectedModelForDownload?.id?.let { modelId ->
                            downloadManager.deleteModel(modelId)
                        }
                    }
                },
                onRedownload = {
                    scope.launch {
                        selectedModelForDownload?.id?.let { modelId ->
                            downloadManager.redownloadModel(modelId)
                        }
                    }
                }
            )
        }
    }
}

// ==================== HELPER ROWS ====================

@Composable
private fun ModelRow(
    model: ModelInfo,
    selected: Boolean,
    darkTheme: Boolean,
    isDownloaded: Boolean = true,
    onClick: () -> Unit
) {
    val titleColor = if (darkTheme) HeaderPanelTokens.TitleDark else HeaderPanelTokens.TitleLight
    val subtleColor = if (darkTheme) HeaderPanelTokens.SubtleDark else HeaderPanelTokens.SubtleLight
    val disabledAlpha = if (model.isAvailable) 1f else 0.4f

    // Determine badge text
    val badgeText = when {
        !model.isAvailable -> model.badge
        !isDownloaded -> "Download"
        else -> model.badge
    }

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(enabled = model.isAvailable) { onClick() }
            .padding(horizontal = 12.dp, vertical = 10.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        RadioButton(
            selected = selected,
            onClick = onClick,
            enabled = model.isAvailable && isDownloaded,
            colors = RadioButtonDefaults.colors(
                selectedColor = HeaderPanelTokens.Accent
            )
        )
        Column(
            modifier = Modifier
                .weight(1f)
                .padding(start = 6.dp)
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Text(
                    model.displayName,
                    color = titleColor.copy(alpha = disabledAlpha),
                    fontWeight = FontWeight.SemiBold,
                    fontSize = 14.sp
                )
                Spacer(Modifier.width(8.dp))
                SpeedChip(
                    text = badgeText,
                    darkTheme = darkTheme,
                    isDisabled = !model.isAvailable,
                    isDownloadButton = !isDownloaded
                )
            }
            Text(
                model.description,
                color = subtleColor.copy(alpha = disabledAlpha),
                fontSize = 12.sp,
                lineHeight = 16.sp
            )
        }
    }
}

@Composable
private fun SpeedChip(
    text: String,
    darkTheme: Boolean,
    isDisabled: Boolean = false,
    isDownloadButton: Boolean = false
) {
    val borderColor = if (darkTheme) HeaderPanelTokens.BorderDark else HeaderPanelTokens.BorderLight
    val titleColor = if (darkTheme) HeaderPanelTokens.TitleDark else HeaderPanelTokens.TitleLight
    val alpha = if (isDisabled) 0.4f else 1f

    val backgroundColor = when {
        isDisabled -> borderColor.copy(alpha = 0.15f)
        isDownloadButton -> HeaderPanelTokens.Accent.copy(alpha = 0.2f)
        else -> borderColor.copy(alpha = 0.25f)
    }

    val textColor = when {
        isDownloadButton -> HeaderPanelTokens.Accent
        else -> titleColor.copy(alpha = alpha)
    }

    Surface(
        shape = RoundedCornerShape(999.dp),
        color = backgroundColor
    ) {
        Text(
            text,
            modifier = Modifier.padding(horizontal = 8.dp, vertical = 2.dp),
            style = MaterialTheme.typography.labelSmall,
            color = textColor,
            fontSize = 10.sp,
            fontWeight = if (isDownloadButton) FontWeight.SemiBold else FontWeight.Normal
        )
    }
}

@Composable
private fun SettingRow(
    title: String,
    darkTheme: Boolean,
    trailing: @Composable () -> Unit
) {
    val titleColor = if (darkTheme) HeaderPanelTokens.TitleDark else HeaderPanelTokens.TitleLight

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 4.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            title,
            color = titleColor,
            fontSize = 14.sp,
            modifier = Modifier.weight(1f)
        )
        trailing()
    }
}

@Composable
private fun ToggleRow(
    title: String,
    checked: Boolean,
    darkTheme: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    SettingRow(title, darkTheme) {
        Switch(
            checked = checked,
            onCheckedChange = onCheckedChange,
            colors = SwitchDefaults.colors(
                checkedThumbColor = HeaderPanelTokens.Accent,
                checkedTrackColor = HeaderPanelTokens.Accent.copy(alpha = 0.5f)
            )
        )
    }
}

@Composable
private fun StepperRow(
    title: String,
    value: Int,
    min: Int,
    max: Int,
    step: Int,
    darkTheme: Boolean,
    onChange: (Int) -> Unit
) {
    val titleColor = if (darkTheme) HeaderPanelTokens.TitleDark else HeaderPanelTokens.TitleLight

    SettingRow(title, darkTheme) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            IconButton(
                onClick = { onChange((value - step).coerceAtLeast(min)) },
                modifier = Modifier.size(32.dp)
            ) {
                Icon(
                    Icons.Outlined.Remove,
                    contentDescription = "Decrease",
                    tint = titleColor
                )
            }
            Text(
                "$value",
                color = titleColor,
                fontSize = 14.sp,
                modifier = Modifier.widthIn(min = 56.dp),
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Medium
            )
            IconButton(
                onClick = { onChange((value + step).coerceAtMost(max)) },
                modifier = Modifier.size(32.dp)
            ) {
                Icon(
                    Icons.Outlined.Add,
                    contentDescription = "Increase",
                    tint = titleColor
                )
            }
        }
    }
}

@Composable
private fun DropdownRow(
    title: String,
    current: String,
    items: List<String>,
    darkTheme: Boolean,
    onPick: (String) -> Unit
) {
    val borderColor = if (darkTheme) HeaderPanelTokens.BorderDark else HeaderPanelTokens.BorderLight
    var open by remember { mutableStateOf(false) }

    SettingRow(title, darkTheme) {
        Box {
            OutlinedButton(
                onClick = { open = true },
                border = BorderStroke(1.dp, borderColor)
            ) {
                Text(current, fontSize = 13.sp)
            }
            DropdownMenu(
                expanded = open,
                onDismissRequest = { open = false }
            ) {
                items.forEach { opt ->
                    DropdownMenuItem(
                        text = { Text(opt) },
                        onClick = {
                            open = false
                            onPick(opt)
                        }
                    )
                }
            }
        }
    }
}
