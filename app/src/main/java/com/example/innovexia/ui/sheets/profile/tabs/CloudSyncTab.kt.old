package com.example.innovexia.ui.sheets.profile.tabs

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.CloudOff
import androidx.compose.material.icons.rounded.CloudQueue
import androidx.compose.material.icons.rounded.Delete
import androidx.compose.material.icons.rounded.Info
import androidx.compose.material.icons.rounded.Sync
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SnackbarDuration
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Switch
import androidx.compose.material3.SwitchDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.innovexia.InnovexiaApplication
import com.example.innovexia.ui.glass.GlassButton
import com.example.innovexia.ui.glass.GlassButtonStyle
import com.example.innovexia.ui.theme.InnovexiaColors
import com.example.innovexia.ui.viewmodels.AuthViewModel
import com.example.innovexia.ui.viewmodels.CloudSyncViewModel

/**
 * Cloud Sync settings tab.
 * Allows signed-in users to enable/disable cloud sync and manage cloud data.
 * Guest users see a disabled state with helper text.
 */
@Composable
fun CloudSyncTab(
    modifier: Modifier = Modifier,
    darkTheme: Boolean = isSystemInDarkTheme(),
    authViewModel: AuthViewModel? = null
) {
    val context = LocalContext.current
    val app = context.applicationContext as InnovexiaApplication

    val cloudSyncVm: CloudSyncViewModel = viewModel { CloudSyncViewModel(context) }
    val authVm = authViewModel ?: viewModel { AuthViewModel(app) }

    val signedIn by authVm.signedIn.collectAsState()
    val syncEnabled by cloudSyncVm.syncEnabled.collectAsState()
    val syncInProgress by cloudSyncVm.syncInProgress.collectAsState()
    val syncProgress by cloudSyncVm.syncProgress.collectAsState()
    val error by cloudSyncVm.error.collectAsState()

    val snackbarHost = remember { SnackbarHostState() }
    var showDeleteDialog by rememberSaveable { mutableStateOf(false) }

    // Show error snackbar
    LaunchedEffect(error) {
        error?.let {
            snackbarHost.showSnackbar(
                message = it,
                duration = SnackbarDuration.Long
            )
            cloudSyncVm.clearError()
        }
    }

    Box(modifier = modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Header
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Icon(
                    imageVector = if (syncEnabled) Icons.Rounded.CloudQueue else Icons.Rounded.CloudOff,
                    contentDescription = "Cloud sync",
                    tint = if (syncEnabled) InnovexiaColors.BlueAccent else InnovexiaColors.Gold
                )
                Column {
                    Text(
                        text = "Cloud Sync",
                        style = MaterialTheme.typography.titleLarge.copy(
                            fontWeight = FontWeight.SemiBold
                        ),
                        color = if (darkTheme) InnovexiaColors.DarkTextPrimary
                        else InnovexiaColors.LightTextPrimary
                    )
                    Text(
                        text = if (signedIn) "Sync your chats across devices"
                        else "Sign in to enable cloud sync",
                        style = MaterialTheme.typography.bodySmall,
                        color = if (darkTheme) InnovexiaColors.DarkTextSecondary
                        else InnovexiaColors.LightTextSecondary
                    )
                }
            }

            Spacer(Modifier.height(8.dp))

            // Sync toggle
            SettingCard(
                title = "Enable Cloud Sync",
                description = if (signedIn)
                    "Backup and sync chats to Firebase Cloud"
                else
                    "Available for signed-in users only",
                darkTheme = darkTheme,
                trailing = {
                    Switch(
                        checked = syncEnabled,
                        onCheckedChange = { cloudSyncVm.toggleSync(it) },
                        enabled = signedIn && !syncInProgress,
                        colors = SwitchDefaults.colors(
                            checkedThumbColor = InnovexiaColors.BlueAccent,
                            checkedTrackColor = InnovexiaColors.BlueAccent.copy(alpha = 0.5f)
                        )
                    )
                }
            )

            // Sync progress
            if (syncInProgress) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clip(RoundedCornerShape(16.dp))
                        .background(
                            if (darkTheme) InnovexiaColors.DarkSurfaceElevated
                            else InnovexiaColors.LightSurfaceElevated
                        )
                        .border(
                            1.dp,
                            if (darkTheme) InnovexiaColors.DarkBorder
                            else InnovexiaColors.LightBorder,
                            RoundedCornerShape(16.dp)
                        )
                        .padding(16.dp)
                ) {
                    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                        Row(
                            horizontalArrangement = Arrangement.SpaceBetween,
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text(
                                text = "Syncing...",
                                style = MaterialTheme.typography.bodyMedium.copy(
                                    fontWeight = FontWeight.Medium
                                ),
                                color = if (darkTheme) InnovexiaColors.DarkTextPrimary
                                else InnovexiaColors.LightTextPrimary
                            )
                            Text(
                                text = "${syncProgress.first} / ${syncProgress.second}",
                                style = MaterialTheme.typography.bodySmall,
                                color = if (darkTheme) InnovexiaColors.DarkTextSecondary
                                else InnovexiaColors.LightTextSecondary
                            )
                        }
                        LinearProgressIndicator(
                            progress = if (syncProgress.second > 0)
                                syncProgress.first.toFloat() / syncProgress.second.toFloat()
                            else 0f,
                            modifier = Modifier.fillMaxWidth(),
                            color = InnovexiaColors.BlueAccent
                        )
                    }
                }
            }

            Spacer(Modifier.height(8.dp))

            // Info section
            InfoBox(
                darkTheme = darkTheme,
                text = """
                    Cloud Sync uses Firebase Firestore and Cloud Storage to backup your chats.

                    • Firestore stores chat structure and metadata
                    • Storage handles large messages and attachments
                    • All data is encrypted and private to your account
                    • Guest mode data is never synced
                """.trimIndent()
            )

            Spacer(Modifier.height(16.dp))

            // Danger zone
            Text(
                text = "Danger Zone",
                style = MaterialTheme.typography.titleMedium.copy(
                    fontWeight = FontWeight.SemiBold
                ),
                color = InnovexiaColors.Error
            )

            GlassButton(
                text = "Delete Cloud Data",
                onClick = { showDeleteDialog = true },
                style = GlassButtonStyle.Danger,
                modifier = Modifier.fillMaxWidth(),
                darkTheme = darkTheme,
                enabled = signedIn && syncEnabled && !syncInProgress
            )
        }

        // Snackbar host
        SnackbarHost(
            hostState = snackbarHost,
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(16.dp)
        )
    }

    // Delete confirmation dialog
    if (showDeleteDialog) {
        AlertDialog(
            onDismissRequest = { showDeleteDialog = false },
            icon = {
                Icon(
                    imageVector = Icons.Rounded.Delete,
                    contentDescription = "Delete",
                    tint = InnovexiaColors.Error
                )
            },
            title = {
                Text("Delete Cloud Data?")
            },
            text = {
                Text(
                    "This will permanently delete all your chats and messages from the cloud. " +
                            "Your local data will NOT be affected. This action cannot be undone."
                )
            },
            confirmButton = {
                GlassButton(
                    text = "Delete",
                    onClick = {
                        cloudSyncVm.deleteCloudData()
                        showDeleteDialog = false
                    },
                    style = GlassButtonStyle.Danger,
                    darkTheme = darkTheme
                )
            },
            dismissButton = {
                GlassButton(
                    text = "Cancel",
                    onClick = { showDeleteDialog = false },
                    style = GlassButtonStyle.Secondary,
                    darkTheme = darkTheme
                )
            }
        )
    }
}

@Composable
private fun SettingCard(
    title: String,
    description: String,
    darkTheme: Boolean,
    trailing: @Composable () -> Unit
) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(16.dp))
            .background(
                if (darkTheme) InnovexiaColors.DarkSurfaceElevated
                else InnovexiaColors.LightSurfaceElevated
            )
            .border(
                1.dp,
                if (darkTheme) InnovexiaColors.DarkBorder
                else InnovexiaColors.LightBorder,
                RoundedCornerShape(16.dp)
            )
            .padding(16.dp)
    ) {
        Row(
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
        ) {
            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.bodyLarge.copy(
                        fontWeight = FontWeight.Medium
                    ),
                    color = if (darkTheme) InnovexiaColors.DarkTextPrimary
                    else InnovexiaColors.LightTextPrimary
                )
                Text(
                    text = description,
                    style = MaterialTheme.typography.bodySmall,
                    color = if (darkTheme) InnovexiaColors.DarkTextSecondary
                    else InnovexiaColors.LightTextSecondary
                )
            }
            trailing()
        }
    }
}

@Composable
private fun InfoBox(
    darkTheme: Boolean,
    text: String
) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(16.dp))
            .background(
                if (darkTheme)
                    InnovexiaColors.BlueAccent.copy(alpha = 0.1f)
                else
                    InnovexiaColors.BlueAccent.copy(alpha = 0.05f)
            )
            .border(
                1.dp,
                InnovexiaColors.BlueAccent.copy(alpha = 0.3f),
                RoundedCornerShape(16.dp)
            )
            .padding(16.dp)
    ) {
        Row(
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalAlignment = Alignment.Top
        ) {
            Icon(
                imageVector = Icons.Rounded.Info,
                contentDescription = "Info",
                tint = InnovexiaColors.BlueAccent,
                modifier = Modifier.padding(top = 2.dp)
            )
            Text(
                text = text,
                style = MaterialTheme.typography.bodySmall.copy(
                    lineHeight = 18.sp
                ),
                color = if (darkTheme) InnovexiaColors.DarkTextPrimary
                else InnovexiaColors.LightTextPrimary
            )
        }
    }
}
